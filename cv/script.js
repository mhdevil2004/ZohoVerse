document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const form = document.getElementById('cv-form');
    const previewBtn = document.getElementById('preview-btn');
    const closePreviewBtn = document.getElementById('close-preview');
    const downloadPreviewBtn = document.getElementById('download-from-preview');
    const previewModal = document.getElementById('preview-modal');
    const cvTemplate = document.getElementById('cv-template');

    // Event Listeners
    previewBtn.addEventListener('click', generateAndPreviewCV);
    closePreviewBtn.addEventListener('click', () => previewModal.classList.add('hidden'));
    downloadPreviewBtn.addEventListener('click', downloadPDF);
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        generateAndPreviewCV();
        downloadPDF();
    });

    // Generate CV and show preview
    function generateAndPreviewCV() {
        // Validate required fields
        const requiredFields = form.querySelectorAll('[required]');
        let isValid = true;
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                field.style.borderColor = 'red';
                isValid = false;
            } else {
                field.style.borderColor = '#ddd';
            }
        });

        if (!isValid) {
            alert('Please fill all required fields');
            return;
        }

        // Get form values
        const formData = {
            fullName: document.getElementById('full-name').value,
            jobTitle: document.getElementById('job-title').value,
            email: document.getElementById('email').value,
            phone: document.getElementById('phone').value,
            address: document.getElementById('address').value,
            summary: document.getElementById('summary').value,
            experience: document.getElementById('experience').value,
            projects: document.getElementById('projects').value,
            skills: document.getElementById('skills').value,
            education: document.getElementById('education').value
        };

        // Generate CV HTML
        cvTemplate.innerHTML = `
            <div class="cv-header">
                <h1>${formData.fullName}</h1>
                <h2>${formData.jobTitle}</h2>
                <div class="cv-contact">
                    <p>${formData.phone}</p>
                    <p>${formData.email}</p>
                    <p>${formData.address}</p>
                </div>
            </div>

            <div class="cv-section">
                <h3>PROFESSIONAL SUMMARY</h3>
                <p class="cv-summary">${formData.summary}</p>
            </div>

            <div class="cv-section">
                <h3>WORK EXPERIENCE</h3>
                ${formatExperience(formData.experience)}
            </div>

            <div class="cv-section">
                <h3>PROJECTS</h3>
                <div class="cv-projects">
                    ${formatProjects(formData.projects)}
                </div>
            </div>

            <div class="cv-section">
                <h3>SKILLS</h3>
                <div class="cv-skills-container">
                    ${formatSkills(formData.skills)}
                </div>
            </div>

            <div class="cv-section">
                <h3>EDUCATION</h3>
                <p>${formData.education.replace(/\n/g, '<br>')}</p>
            </div>

            <div class="cv-footer">
                <p>Generated by ZohoVerse CV Maker</p>
            </div>
        `;

        // Show preview
        previewModal.classList.remove('hidden');
    }

    // Format experience text
    function formatExperience(experienceText) {
        if (!experienceText) return '<p>No experience provided</p>';
        
        const entries = experienceText.split('\n\n');
        return entries.map(entry => {
            const lines = entry.split('\n');
            if (lines.length < 2) return `<p>${entry}</p>`;
            
            const titleLine = lines[0];
            const [company, dates] = titleLine.split('(');
            const bullets = lines.slice(1).filter(line => line.trim().startsWith('-'));
            
            return `
                <div class="cv-experience">
                    <h4>${company.replace('-', '').trim()}</h4>
                    <div class="meta">
                        <span class="company">${company.split('-')[0].trim()}</span>
                        ${dates ? `<span>(${dates.replace(')', '').trim()})</span>` : ''}
                    </div>
                    ${bullets.length > 0 ? `
                    <ul>
                        ${bullets.map(bullet => `
                            <li>${bullet.replace('-', '').trim()}</li>
                        `).join('')}
                    </ul>` : ''}
                </div>
            `;
        }).join('');
    }

    // Format projects text
    function formatProjects(projectsText) {
        if (!projectsText) return '<p>No projects provided</p>';
        
        const entries = projectsText.split('\n\n');
        return entries.map(entry => {
            const lines = entry.split('\n');
            if (lines.length < 2) return `<p>${entry}</p>`;
            
            const title = lines[0];
            const bullets = lines.slice(1).filter(line => line.trim().startsWith('-'));
            
            return `
                <div class="cv-project">
                    <h4>${title}</h4>
                    ${bullets.length > 0 ? `
                    <ul>
                        ${bullets.map(bullet => `
                            <li>${bullet.replace('-', '').trim()}</li>
                        `).join('')}
                    </ul>` : ''}
                </div>
            `;
        }).join('');
    }

    // Format skills text
    function formatSkills(skillsText) {
        if (!skillsText) return '<p>No skills provided</p>';
        
        // Split into categories
        const categories = skillsText.split('\n').filter(line => line.trim().includes(':'));
        
        return categories.map(category => {
            const [name, items] = category.split(':');
            const skillItems = items.split(',').map(item => item.trim());
            
            return `
                <div class="cv-skill-category">
                    <h4>${name.trim()}</h4>
                    <ul>
                        ${skillItems.map(item => `<li>${item}</li>`).join('')}
                    </ul>
                </div>
            `;
        }).join('');
    }

    // Download PDF function
    function downloadPDF() {
        const element = document.getElementById('cv-template');
        
        // Make sure element is visible for PDF generation
        element.style.visibility = 'visible';
        element.style.position = 'static';
        
        // PDF options
        const opt = {
            margin: 10,
            filename: `${document.getElementById('full-name').value || 'my'}-resume.pdf`,
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: {
                scale: 2,
                logging: false,
                useCORS: true,
                allowTaint: true,
                scrollX: 0,
                scrollY: 0
            },
            jsPDF: { 
                unit: 'mm', 
                format: 'a4', 
                orientation: 'portrait' 
            }
        };

        // Generate PDF
        html2pdf()
            .set(opt)
            .from(element)
            .toPdf()
            .get('pdf')
            .then(function(pdf) {
                const totalPages = pdf.internal.getNumberOfPages();
                for (let i = 1; i <= totalPages; i++) {
                    pdf.setPage(i);
                    pdf.setFontSize(10);
                    pdf.setTextColor(150);
                    pdf.text('Generated by ZohoVerse CV Maker', 
                            pdf.internal.pageSize.getWidth() - 70,
                            pdf.internal.pageSize.getHeight() - 10);
                }
            })
            .save()
            .then(() => {
                // Reset element styles after PDF generation
                element.style.visibility = '';
                element.style.position = '';
            });
    }
});